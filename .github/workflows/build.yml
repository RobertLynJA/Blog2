name: Build
concurrency: deploy

on: 
  push:
    branches:
      - "main"
      - "release"
  pull_request:
    branches:
      - "main"

env:
  AZURE_NEXTJS_WEBAPP_NAME: 'NextJSAppService'   
  AZURE_WEBAPP_PACKAGE_PATH: './'         
  NODE_VERSION: '18.x'
  WEB_WORKING_DIRECTORY: './web'
  AZURE_API_WEBAPP_NAME: 'RobertLynJA'

jobs:

  build-web:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './web/package-lock.json'
    - name: npm install, build, and test 
      run: |
        # Build and test the project, then
        # deploy to Azure Web App.
        npm install
        npm run build --if-present
        npm run test:ci --if-present
      working-directory: ${{ env.WEB_WORKING_DIRECTORY }}
    - name: Move static folders into dynamic folder
      run: |
        cp -r ./public ./.next/standalone                     
        cp -r ./.next/static ./.next/standalone/.next/static
        rm ./.next/standalone/package.json #Remove package.json to force the server to use server.js
      working-directory: ${{ env.WEB_WORKING_DIRECTORY }}
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: nextjs
        path: ./web/.next/standalone

  build-api:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Cache Nuget
      id: cache-nuget
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-  
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: |
        dotnet test --logger trx --results-directory "TestResults" 
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results
        path: TestResults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}        
    - name: Publish
      run: |
        dotnet publish ./API/API.csproj  -c Release -o ./release --os linux       
    - name: Upload a Build Artifact (.Net)
      uses: actions/upload-artifact@v3
      with:
        name: api
        path: ./release/**
        if-no-files-found: error

  deploy-api-service:
    needs: build-api
    runs-on: windows-latest
    if: ${{ github.event_name == 'push' }}
    environment:
      name: Production
      url: https://www.robertlynja.com
      
    defaults:
      run:
        shell: powershell
      
    steps:
    - name: Download a Build Artifact (.Net)
      uses: actions/download-artifact@v3
      with:
        name: api
        path: website
    - name: Add secrets 
      uses: robertlynja/variable-substitution@v1.02
      with:
        files: './website/appsettings.json'
      env:
        ConnectionStrings.DefaultConnection: ${{ secrets.SQL_CONNECTION_STRING }}
    # Deploy to Azure Web apps
    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2.2.5
      with: 
        app-name: ${{ env.AZURE_API_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }}
        package: './website'
        
  deploy-web:
    needs: build-web
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    
    environment:
      name: Production
      url: https://www.robertlynja.com        
      
    steps:      
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: nextjs
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_NEXTJS_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_NEXTJS_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}